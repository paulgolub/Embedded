#include <WiFi.h>
#include <WiFiUdp.h>

#define DEVICE_ID "Node6"
#define SA0  0
#define SA1  4
#define SA2 26
#define SA3 25
#define MAX_REPEAT 3

const char * ssid = "SSID_NAME";
const char * pass = "pass";

const int localPort=1702;
//const int receiverPort=1703;
const int receiverPort=8085;

IPAddress dataLoggerAddress(192, 168, 0, 2);
WiFiUDP udp;
 
int nLoop;
boolean debug=true;

int sensorPin[4] = { SA0, SA1, SA2, SA3 };


void setup() {

  for(int i=0; i < 4; i++) pinMode(sensorPin[i], INPUT_PULLUP);

  Serial.begin(115200);

  WiFi.mode(WIFI_STA);
  
  WiFi.begin(ssid, pass);

  Serial2.print("Connecting to ");Serial2.println(ssid);

  nLoop=0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    nLoop++;
    if (nLoop > 20) ESP.restart();
  }  

  Serial.print("Connected IP address: ");Serial.println(WiFi.localIP());
  
  udp.begin(localPort);
        
  delay(1000);

}

int sensorStatus[4] = { HIGH, HIGH, HIGH, HIGH };
int sensorVal[4];

int sendMsg=1,repeatMsg=0;
byte sendBuffer[32];
char messageBuffer[32];
long lastMessageTS=0;
int elapsed;

void loop() {

    for(int i=0; i < 4; i++) {
      sensorVal[i] = digitalRead(sensorPin[i]);
      if (sensorVal[i]!=sensorStatus[i]) {
        sendMsg=1;
        repeatMsg=0;
        sensorStatus[i]=sensorVal[i];
      }
    }

    if (millis()-lastMessageTS > 1000) {
      sendMsg=1;
      repeatMsg=0;
    } 
    
    if (sendMsg) {
       memset(messageBuffer, 0, sizeof(messageBuffer));
       Serial.print(sensorStatus[0]); Serial.print(sensorStatus[1]); Serial.print(sensorStatus[2]); Serial.println(sensorStatus[3]);
       sprintf(messageBuffer,"#%s=%d%d%d%d",DEVICE_ID,sensorStatus[0],sensorStatus[1],sensorStatus[2],sensorStatus[3]);
       Serial.println(messageBuffer);
       int len = strlen(messageBuffer);
       for(int i=0; i < len; i++) sendBuffer[i] = messageBuffer[i];
       sendUDPMessage(sendBuffer, len);
       lastMessageTS=millis();
       repeatMsg++;
       if (repeatMsg>=MAX_REPEAT) sendMsg=0;
    }
    
    delay(100);
}

void sendUDPMessage(byte buffer[], int msgLen) {
  udp.beginPacket(dataLoggerAddress, receiverPort);
  udp.write(buffer, msgLen);
  udp.endPacket();
  delay(1);  
}
